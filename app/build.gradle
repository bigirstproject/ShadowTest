apply plugin: 'com.android.application'

android {

    compileSdkVersion project.COMPILE_SDK_VERSION
    defaultConfig {
        applicationId project.SAMPLE_HOST_APP_APPLICATION_ID
        minSdkVersion project.MIN_SDK_VERSION
        targetSdkVersion project.TARGET_SDK_VERSION
        versionCode project.VERSION_CODE
        versionName project.VERSION_NAME
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        debug {
            assets.srcDir('build/generated/assets/manager/debug/')
            assets.srcDir('build/generated/assets/plugin-zip/debug/')
        }
        release {
            assets.srcDir('build/generated/assets/manager/release/')
            assets.srcDir('build/generated/assets/plugin-zip/release/')
        }
    }
    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'

    implementation 'commons-io:commons-io:2.5'//sample-host从assets中复制插件用的
    implementation 'org.slf4j:slf4j-api:1.7.25'


    implementation 'com.tencent.shadow.core:common'
    implementation 'com.tencent.shadow.dynamic:dynamic-host'

    implementation project(':constant')
    implementation project(':host-lib')

}


def createCopyTask(projectName, buildType, name, apkName, inputFile, taskName) {
    println('================2222projectName = '+projectName+ ' buildType = '+buildType+ ' name = '+name+ ' apkName = '+apkName+ ' inputFile = '+inputFile+ ' taskName = '+taskName)
    def outputFile = file("${getBuildDir()}/generated/assets/${name}/${buildType}/${apkName}")
    println('================2222outputFile = '+outputFile.getAbsolutePath())
    outputFile.getParentFile().mkdirs()
    return tasks.create("copy${buildType.capitalize()}${name.capitalize()}Task", Copy) {
        group = 'build'
        description = "复制${name}到assets中."
        from(inputFile.getParent()) {
            include(inputFile.name)
            rename { outputFile.name }
        }
        into(outputFile.getParent())

    }.dependsOn("${projectName}:${taskName}")
}

def generateAssets(generateAssetsTask, buildType) {
    def moduleName = 'manager'
    def pluginManagerApkFile = file(
            "${project(":manager").getBuildDir()}" +
                    "/outputs/apk/${buildType}/" +
                    "${moduleName}-${buildType}.apk"
    )

    println('================2222pluginManagerApkFile = '+pluginManagerApkFile.getAbsolutePath())

    generateAssetsTask.dependsOn createCopyTask(
            ':manager',
            buildType,
            moduleName,
            'pluginmanager.apk',
            pluginManagerApkFile,
            "assemble${buildType.capitalize()}"
    )

    def pluginZip = file("${getRootProject().getBuildDir()}/plugin-${buildType}.zip")

    println('================pluginZip = '+pluginZip.getAbsolutePath())

    generateAssetsTask.dependsOn createCopyTask(
            ':plugin-app',
            buildType,
            'plugin-zip',
            "plugin-${buildType}.zip",
            pluginZip,
            "package${buildType.capitalize()}Plugin"
    )

}

tasks.whenTaskAdded { task ->
    if (task.name == "generateDebugAssets") {
        generateAssets(task, 'debug')
    }
    if (task.name == "generateReleaseAssets") {
        generateAssets(task, 'release')
    }
}
