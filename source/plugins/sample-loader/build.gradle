apply plugin: 'com.android.application'

android {
    compileSdkVersion project.COMPILE_SDK_VERSION

    defaultConfig {
        applicationId project.SAMPLE_HOST_APP_APPLICATION_ID
        minSdkVersion project.MIN_SDK_VERSION
        targetSdkVersion project.TARGET_SDK_VERSION
        versionCode project.VERSION_CODE
        versionName project.VERSION_NAME
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation 'com.tencent.shadow.core:loader'
    implementation 'com.tencent.shadow.dynamic:dynamic-loader'
    implementation 'com.tencent.shadow.dynamic:dynamic-loader-impl'
    implementation project(':constant')

    compileOnly 'com.tencent.shadow.core:runtime-debug'
    compileOnly 'com.tencent.shadow.core:common-debug'
    //下面这行依赖是为了防止在proguard的时候找不到LoaderFactory接口
    compileOnly 'com.tencent.shadow.dynamic:dynamic-host-debug'

    compileOnly files("${project(":host-lib").getBuildDir()}/outputs/jar/host-lib-debug.jar")
}

preBuild.dependsOn(":host-lib:jarDebugPackage")

afterEvaluate {
    android {
        buildTypes.findAll().each { buildType ->
            def buildTypeName = buildType.getName()
            println("=============1111 buildTypeName  = "+buildTypeName+" Classpath = "+ ("check"+buildTypeName.capitalize()+"Classpath"))
            def task1 = project.getTasksByName("check${buildTypeName.capitalize()}Classpath", false)
            println("=============1111 task1  = "+task1)
            def task = task1.first() as Task
//            def task = project.getTasksByName("checkDebugClasspath", false).first() as Task
            println("=============1111 task  = "+task)
            task.dependsOn gradle.includedBuild('core').task(':common:jarDebugPackage')
            task.dependsOn gradle.includedBuild('dynamic').task(':dynamic-host:jarDebugPackage')
        }
    }
}